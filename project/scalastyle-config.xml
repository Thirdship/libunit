<scalastyle>
 <name>Thirdship Scalastyle standard configuration</name>

 <check level="warning" class="org.scalastyle.file.FileLengthChecker" enabled="true">
  <parameters>
   <parameter name="maxFileLength"><![CDATA[800]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.DisallowSpaceAfterTokenChecker" enabled="true">
  <parameters>
   <parameter name="tokens">LPAREN, LBRACKET</parameter>
  </parameters>
 </check>

 <check enabled="true" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" level="warning">
  <parameters>
   <parameter name="tokens">COLON, COMMA, RPAREN, RBRACKET</parameter>
  </parameters>
 </check>

 <check enabled="true" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" level="warning">
  <parameters>
   <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
  <parameters>
   <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW, EXCLAMATION</parameter>
  </parameters>
 </check>

 <!-- ??? usually shouldn't be checked into the code base. -->
 <check level="warning" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"></check>

 <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
  <parameters>
   <parameter name="maxLineLength"><![CDATA[160]]></parameter>
   <parameter name="tabSize"><![CDATA[4]]></parameter>
   <parameter name="ignoreImports">true</parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
  <parameters>
   <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
  <parameters>
   <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
  <parameters>
   <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
  <parameters>
   <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
  <parameters>
   <parameter name="maxParameters"><![CDATA[8]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
  <parameters>
   <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.NullChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">
  <parameters>
   <parameter name="groups">java,scala,3rdParty,thirdship</parameter>
   <parameter name="group.java">javax?\..*</parameter>
   <parameter name="group.scala">scala\..*</parameter>
   <parameter name="group.3rdParty">(?!com\.thirdship\.).*</parameter>
   <parameter name="group.thirdship">com\.thirdship\..*</parameter>
  </parameters>
  <customMessage><![CDATA[
      Imports must be alphabetized per import and grouped in this order:
      java, scala, 3rd party libraries, then Thirdship
    ]]></customMessage>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
  <parameters>
   <parameter name="maxTypes"><![CDATA[30]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
  <parameters>
   <parameter name="maximum"><![CDATA[10]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
  <parameters>
   <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
   <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
  <parameters>
   <parameter name="maxLength"><![CDATA[50]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
  <parameters>
   <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
  <parameters>
   <parameter name="maxMethods"><![CDATA[30]]></parameter>
  </parameters>
 </check>

 <check level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"></check>

 <check level="warning" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"></check>

 <check customId="mutablesynchronizedbuffer" level="warning" class="org.scalastyle.file.RegexChecker" enabled="true">
  <parameters><parameter name="regex">mutable\.SynchronizedBuffer</parameter></parameters>
  <customMessage><![CDATA[
      Are you sure that you want to use mutable.SynchronizedBuffer? In most cases, you should use
      java.util.concurrent.ConcurrentLinkedQueue instead.
      If you must use mutable.SynchronizedBuffer, wrap the code block with
      // scalastyle:off mutablesynchronizedbuffer
      mutable.SynchronizedBuffer[...]
      // scalastyle:on mutablesynchronizedbuffer
    ]]></customMessage>
 </check>

 <check customId="classforname" level="warning" class="org.scalastyle.file.RegexChecker" enabled="true">
  <parameters><parameter name="regex">Class\.forName</parameter></parameters>
  <customMessage><![CDATA[
      Are you sure that you want to use Class.forName? In most cases, you should use Utils.classForName instead.
      If you must use Class.forName, wrap the code block with
      // scalastyle:off classforname
      Class.forName(...)
      // scalastyle:on classforname
    ]]></customMessage>
 </check>

 <!-- JavaConversions should be replaced with JavaConverters -->
 <check customId="javaconversions" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
  <parameters><parameter name="regex">JavaConversions</parameter></parameters>
  <customMessage>Instead of importing implicits in scala.collection.JavaConversions._, import
   scala.collection.JavaConverters._ and use .asScala / .asJava methods</customMessage>
 </check>

 <!-- Single Space between ')' and '{' -->
 <check customId="space.rparen.and.lbrace" level="warning" class="org.scalastyle.file.RegexChecker" enabled="true">
  <parameters><parameter name="regex">\)\{</parameter></parameters>
  <customMessage><![CDATA[
      Single Space between ')' and `{`.
    ]]></customMessage>
 </check>

 <!-- All printlns need to be wrapped in '// scalastyle:off/on println' -->
 <check customId="println" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
  <parameters><parameter name="regex">^println$</parameter></parameters>
  <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
      // scalastyle:off println
      println(...)
      // scalastyle:on println]]></customMessage>
 </check>

 <!--
   ****************************************************************************
   Checks we should probably use, but it doesn't make sense to do it right now.
   ****************************************************************************
 -->
 <check level="warning" class="org.scalastyle.file.FileTabChecker" enabled="false"></check>

 <check level="warning" class="org.scalastyle.file.HeaderMatchesChecker" enabled="false">
  <parameters>
   <parameter name="header"><![CDATA[/* Copyright (C) 2014-2016 the original author or authors.
 * All rights reserved.
 */]]></parameter>
  </parameters>
 </check>

 <!--
   ********************************
   Checks we don't want to enforce.
   ********************************
 -->

 <!-- This doesn't make sense to enable since we want the opposite. -->
 <check level="warning" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"></check>

 <!-- This makes it so that all return statements are marked.
      We use returns for short-circuiting logic, so this would be bad to enable. -->
 <check level="warning" class="org.scalastyle.scalariform.ReturnChecker" enabled="false"></check>
</scalastyle>